---
title: Tag Label
format: html
editor: visual
---

This script will guide you through the tag labelling of pressure and/or acceleration data and creation of the pressure map.

::: callout-tip
*Delete this block when you have read!*

-   These scripts should be adapted based on your project, but the same script should run for all your tags. You can always check [the original version online](https://github.com/Rafnuss/GeoPressureTemplate/blob/main/analysis/1-label.qmd).
-   Make sure you've read the [GeoPressureManual](https://raphaelnussbaumer.com/GeoPressureManual), in particular the [labelling instructions](https://raphaelnussbaumer.com/GeoPressureManual/labelling-tracks.html), before running this script
-   Nothing is saved at the end of the script and it is meant to be like that. Only tag label file and config.yml should be edited. Use `geopressure.R` for the final run.
:::

```{r, setup}
# Choose the id
id <- "18LX"

# Set the directory to the project root
# see Working directory bullet point in https://bookdown.org/yihui/rmarkdown/notebook.html#executing-code
knitr::opts_knit$set(root.dir = normalizePath(".."))
# Alternatively, you can change the global RStudio settings in menu "Tools/Global Options...", on the "R Markdown" panel, choose "Project" for "Evaluate chunks in directory:"

library(GeoPressureR)
library(ggplot2)
```

## Edit `config.yml`

::: callout-tip
*Delete this block when you have read!*

Edit the default config according to your study: Use `default` for all parameters which are the same for *all* your tracks and add any parameter that is tag specific.

To define specific parameters, create a new section with the tag name, e.g.,

``` yaml
18LX:
  id: "18LX"
  crop_start: "2017-06-20"
  crop_end: "2018-05-02"
  known: !expr data.frame(stap_id = 1,
                    known_lon = 17.05,
                    known_lat = 48.9)
  scientific_name: "Acrocephalus arundinaceus" # only if you have different species, otherwise add to default
```
:::

Check that the config is correct.

```{r}
getwd()
stopifnot(id == config::get("id", config = id))
```

## Sensor data and crop date

Check if the crop dates (in red) are correct.

```{r}
tag_no_crop <- tag_create(config::get("id", id))

plot(tag_no_crop, type = "pressure", plot_plotly = F) +
  geom_vline(
    xintercept = c(
      as.POSIXct(config::get("crop_start", id)),
      as.POSIXct(config::get("crop_end", id))
    ),
    color = "red", lwd = 1
  )
```

You might want to change `type` to check the values of the other sensors (acceleration or light).

Create tag with crop date

```{r tag_create}
tag <- tag_create(config::get("id", id),
  crop_start = config::get("crop_start", id),
  crop_end = config::get("crop_end", id)
)
```

## Create label and edit on Trainset

```{r}
tag_label_write(tag)
```

Open `csv` and edit on <https://trainset.raphaelnussbaumer.com/>.

## Run [simple labelling checks](https://raphaelnussbaumer.com/GeoPressureManual/labelling-tracks.html#simple-checks)

**Check 1**

```{r}
tag <- tag_label(tag)
```

::: callout-tip
*Delete this block when you have read!*

Edit and export label on Trainset and simply run the same chunk until you're happy with it! This principle (edit your label file and re-run the same chunk) is valid throughout this script.
:::

**Check 2**

```{r}
plot(tag, type = "pressure")
```

## Run [Pressurepath checks](https://raphaelnussbaumer.com/GeoPressureManual/labelling-tracks.html#pressurepath-checks)

Compute pressure map on a coarse grid to perform checks 3-5.

```{r}
tag <- tag_set_map(tag,
  extent = config::get("extent", id),
  scale = 1,
  known = config::get("known", id),
  include_min_duration = 24
) |>
  geopressure_map(max_sample = 50)
```

```{r}
pressurepath <- pressurepath_create(tag)
```

**Check 3**

```{r}
plot_pressurepath(pressurepath)
```

**Check 4**

```{r}
plot_pressurepath(pressurepath, type = "hist")
```

## Run [GeoPressureViz checks](https://raphaelnussbaumer.com/GeoPressureManual/labelling-tracks.html#geopressureviz-checks)

```{r}
geopressureviz(
  tag,
  # path = pressurepath,
  # path = most_likely_path,
  # marginal = marginal
)
```

## Update of `tag` and `pressurepath`

::: callout-tip
*Delete this block when you have read!*

You can use `tag_upate()` and `pressurepath_update()` every time you edit and export a new label file from Trainset. You might want to start from a new tag and pressurepath variable if you encounter any problem.
:::

```{r}
tag <- tag_update(tag)
```

```{r}
pressurepath <- pressurepath_update(pressurepath, tag)
```
